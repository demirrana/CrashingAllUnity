using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Pathfinder : MonoBehaviour
{
    [Tooltip("The place that enemies are gonna start from (that node's coordinates)")]
    [SerializeField] Vector2Int startCoordinates;
    public Vector2Int StartCoordinates { get { return startCoordinates; } } //EnemyMover needs access

    [Tooltip("The place that enemies are aiming to reach (that node's coordinates)")]
    [SerializeField] Vector2Int destinationCoordinates;
    public Vector2Int DestinationCoordinates { get { return destinationCoordinates; } }

    Node startNode; //The node that is a starting point for the pathfinding process
    Node destinationNode; //The node that is the finish point for the pathfinding process
    Node currentSearchNode;

    Dictionary<Vector2Int, Node> reached = new Dictionary<Vector2Int, Node>(); //The nodes that are not yet discovered (in the search)
    Queue<Node> frontier = new Queue<Node>(); //The queue that is used to discover the nodes

    Vector2Int[] directions = {Vector2Int.right, Vector2Int.left, Vector2Int.up, Vector2Int.down}; //In order to find the adjacents
    GridManager gridManager;
    Dictionary<Vector2Int, Node> grid = new Dictionary<Vector2Int, Node>();

    void Awake()
    {
        gridManager = FindObjectOfType<GridManager>();
        if (gridManager != null)
        {
            grid = gridManager.Grid;
            startNode = grid[startCoordinates];
            destinationNode = grid[destinationCoordinates];
        }
    }

    void Start()
    {
        GetNewPath();
    }

    public List<Node> GetNewPath() //The path from the start to the destination is found
    {
        return GetNewPath(startCoordinates);
    }

    public List<Node> GetNewPath(Vector2Int givenStartingCoordinates) //Returns the path from the start to the end if it exists
    {
        gridManager.ResetNodes(); //First, all properties of the node are reset so that we can find a new path.
        BreadthFirstSearch(givenStartingCoordinates);
        return BuildPath();
    }

    void BreadthFirstSearch(Vector2Int startingCoordinates)
    {
        frontier.Clear();
        reached.Clear();

        bool isRunning = true; //The method is still run or not

        frontier.Enqueue(grid[startingCoordinates]);
        reached.Add(startingCoordinates, grid[startingCoordinates]);

        while (frontier.Count > 0 && isRunning) //There are nodes which are undiscovered and the method still runs
        {
            currentSearchNode = frontier.Dequeue(); //The node that is discovered now
            currentSearchNode.isExplored = true;
            ExploreNeighbors();

            if (destinationCoordinates == currentSearchNode.coordinates) //If the node that we want to reach is reached, method doesn't need to run
            {
                isRunning = false;
            }
        }
    }

    void ExploreNeighbors() //Marks the neighbors of the current node as reached
    {
        List<Node> neighbors = new List<Node>(); //The 4 neighbors are put in this list

        foreach(Vector2Int direction in directions) //In order to find the coordinates of the neighbors
        {
            Vector2Int neighborCoordinates = currentSearchNode.coordinates + direction;

            if (grid.ContainsKey(neighborCoordinates))
            {
                neighbors.Add(grid[neighborCoordinates]);
            }
        }

        foreach (Node neighbor in neighbors) //Unreached neighbors are marked as reached
        {
            if (!reached.ContainsKey(neighbor.coordinates) && neighbor.isWalkable)
            {
                reached.Add(neighbor.coordinates, neighbor);
                frontier.Enqueue(neighbor);
                neighbor.connectedTo = currentSearchNode; //A connection is generated so that we can generate the path backwards
            }
        }
    }

    List<Node> BuildPath() //Returns the path that is generated by Breadth First Search
    {
        List<Node> path = new List<Node>();
        Node currentNode = destinationNode;
        path.Add(currentNode);
        currentNode.isPath = true;

        while (currentNode.connectedTo != null) //Going backwards from the destination node to the starting node
        {
            currentNode = currentNode.connectedTo;
            path.Add(currentNode);
            currentNode.isPath = true;
        }

        path.Reverse();

        return path;
    }

    public bool WillBlockPath(Vector2Int coordinates) //Returns true if the tower that is placed will block the enemy's way
    {
        if (grid.ContainsKey(coordinates))
        {
            bool previousState = grid[coordinates].isWalkable;

            grid[coordinates].isWalkable = false; //Controls with the state of this node being enemies to not being able to reach there
            List<Node> newPath = GetNewPath();
            grid[coordinates].isWalkable = previousState;

            if (newPath.Count <= 1) //In the case of not being able to reach the destination, only 1 element is in the new path
            {
                GetNewPath(); //Searches for it with the previous state
                return true;
            }
        }

        return false;
    }

    public void NotifyReceivers() //The method that makes it possible to compute the path each moment
    {
        BroadcastMessage("RecalculatePath", false, SendMessageOptions.DontRequireReceiver); //false is the parameter of RecalculatePath
    }
}